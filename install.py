#!/usr/bin/env python3
"""
DiagramHub Installation Script
Interactive setup for MongoDB configuration and environment setup.
"""
import os
import sys
import subprocess
from urllib.parse import urlparse


def print_header():
    """Print welcome header."""
    print("\n" + "=" * 60)
    print("    DiagramHub - Interactive Installation")
    print("=" * 60 + "\n")


def print_section(title):
    """Print section header."""
    print(f"\n{'‚îÄ' * 60}")
    print(f"  {title}")
    print(f"{'‚îÄ' * 60}\n")


def get_input(prompt, default=None):
    """Get user input with optional default value."""
    if default:
        user_input = input(f"{prompt} [{default}]: ").strip()
        return user_input if user_input else default
    return input(f"{prompt}: ").strip()


def get_yes_no(prompt, default=True):
    """Get yes/no input from user."""
    default_str = "Y/n" if default else "y/N"
    response = input(f"{prompt} [{default_str}]: ").strip().lower()

    if not response:
        return default
    return response in ['y', 'yes', 's', 'si', 's√≠']


def test_mongodb_connection(mongo_uri):
    """Test MongoDB connection."""
    print("\nüîÑ Testing MongoDB connection...")

    try:
        from pymongo import MongoClient
        from pymongo.errors import ConnectionFailure, ServerSelectionTimeoutError

        # Try to connect with timeout
        client = MongoClient(mongo_uri, serverSelectionTimeoutMS=5000)

        # Force connection attempt
        client.admin.command('ping')

        # Get server info
        server_info = client.server_info()
        version = server_info.get('version', 'Unknown')

        client.close()

        print(f"‚úÖ Connection successful! MongoDB version: {version}")
        return True

    except (ConnectionFailure, ServerSelectionTimeoutError) as e:
        print(f"‚ùå Connection failed: {str(e)}")
        return False
    except ImportError:
        print("‚ö†Ô∏è  pymongo not installed. Installing...")
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "pymongo"],
                          check=True, capture_output=True)
            print("‚úÖ pymongo installed successfully")
            return test_mongodb_connection(mongo_uri)  # Retry
        except subprocess.CalledProcessError:
            print("‚ùå Failed to install pymongo. Please install manually:")
            print("   pip install pymongo")
            return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {str(e)}")
        return False


def generate_jwt_secret():
    """Generate a secure JWT secret."""
    import secrets
    return secrets.token_urlsafe(32)


def create_env_file(config):
    """Create .env file in backend directory."""
    backend_env_path = os.path.join(os.path.dirname(__file__), 'backend', '.env')

    print(f"\nüìù Creating environment file: {backend_env_path}")

    env_content = f"""# DiagramHub Backend Configuration
# Generated by install.py

# MongoDB Configuration
MONGO_URI={config['mongo_uri']}
DATABASE_NAME={config['database_name']}

# JWT Configuration
JWT_SECRET={config['jwt_secret']}
ACCESS_TOKEN_EXPIRE_MINUTES=30

# API Configuration
API_V1_PREFIX=/api/v1
"""

    try:
        with open(backend_env_path, 'w') as f:
            f.write(env_content)
        print("‚úÖ Environment file created successfully")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {str(e)}")
        return False


def create_docker_compose_override(use_external_mongodb):
    """Create docker-compose.override.yml if using external MongoDB."""
    if not use_external_mongodb:
        return True

    override_path = os.path.join(os.path.dirname(__file__), 'docker-compose.override.yml')

    print(f"\nüìù Creating Docker Compose override: {override_path}")

    override_content = """# Docker Compose Override
# This file disables the local MongoDB service when using external MongoDB

version: '3.8'

services:
  mongodb:
    # Disable local MongoDB when using external service
    profiles:
      - disabled
"""

    try:
        with open(override_path, 'w') as f:
            f.write(override_content)
        print("‚úÖ Docker Compose override created successfully")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create override file: {str(e)}")
        return False


def setup_mongodb_config():
    """Interactive MongoDB configuration."""
    print_section("MongoDB Configuration")

    print("Choose your MongoDB setup:\n")
    print("1. üê≥ Local MongoDB (Docker) - Recommended for development")
    print("2. üåê External MongoDB (Atlas, custom server, etc.)")

    choice = get_input("\nEnter your choice (1 or 2)", "1")

    if choice == "1":
        # Local MongoDB via Docker
        print("\n‚úÖ Using local MongoDB with Docker")
        mongo_uri = "mongodb://mongodb:27017"
        database_name = get_input("Database name", "diagramahub")
        use_external = False

        print("\n‚ö†Ô∏è  Note: MongoDB will run in Docker. Make sure Docker is installed.")

    elif choice == "2":
        # External MongoDB
        print("\nüåê External MongoDB Configuration")
        print("\nExample formats:")
        print("  - MongoDB Atlas: mongodb+srv://user:pass@cluster.mongodb.net/")
        print("  - Standard:      mongodb://user:pass@host:27017/")
        print("  - Local custom:  mongodb://localhost:27017/")

        while True:
            mongo_uri = get_input("\nEnter MongoDB connection URI")

            if not mongo_uri:
                print("‚ùå MongoDB URI cannot be empty")
                continue

            # Test connection
            if test_mongodb_connection(mongo_uri):
                break
            else:
                retry = get_yes_no("\nWould you like to try again?", True)
                if not retry:
                    print("\n‚ùå Installation aborted")
                    sys.exit(1)

        database_name = get_input("Database name", "diagramahub")
        use_external = True

    else:
        print("‚ùå Invalid choice")
        sys.exit(1)

    return {
        'mongo_uri': mongo_uri,
        'database_name': database_name,
        'use_external': use_external
    }


def setup_jwt_config():
    """Interactive JWT configuration."""
    print_section("JWT Security Configuration")

    print("A secure JWT secret is required for authentication.")

    use_generated = get_yes_no("Generate a secure JWT secret automatically?", True)

    if use_generated:
        jwt_secret = generate_jwt_secret()
        print(f"\n‚úÖ Generated JWT secret: {jwt_secret[:20]}... (hidden for security)")
    else:
        while True:
            jwt_secret = get_input("Enter your JWT secret (minimum 32 characters)")
            if len(jwt_secret) >= 32:
                break
            print("‚ùå JWT secret must be at least 32 characters long")

    return jwt_secret


def check_docker_installed():
    """Check if Docker is installed."""
    try:
        result = subprocess.run(['docker', '--version'],
                              capture_output=True,
                              text=True,
                              check=True)
        print(f"‚úÖ Docker found: {result.stdout.strip()}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker not found. Please install Docker first.")
        print("   Visit: https://docs.docker.com/get-docker/")
        return False


def check_docker_compose_installed():
    """Check if Docker Compose is installed."""
    try:
        result = subprocess.run(['docker-compose', '--version'],
                              capture_output=True,
                              text=True,
                              check=True)
        print(f"‚úÖ Docker Compose found: {result.stdout.strip()}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker Compose not found. Please install Docker Compose.")
        print("   Visit: https://docs.docker.com/compose/install/")
        return False


def main():
    """Main installation flow."""
    print_header()

    print("Welcome! This script will help you set up DiagramHub.\n")

    # Check prerequisites
    print_section("Checking Prerequisites")

    if not check_docker_installed():
        sys.exit(1)

    if not check_docker_compose_installed():
        sys.exit(1)

    # MongoDB configuration
    mongo_config = setup_mongodb_config()

    # JWT configuration
    jwt_secret = setup_jwt_config()

    # Prepare final configuration
    config = {
        **mongo_config,
        'jwt_secret': jwt_secret
    }

    # Create configuration files
    print_section("Creating Configuration Files")

    if not create_env_file(config):
        sys.exit(1)

    if not create_docker_compose_override(config['use_external']):
        sys.exit(1)

    # Final summary
    print_section("Installation Summary")

    print("‚úÖ Installation completed successfully!\n")
    print("Configuration:")
    print(f"  - MongoDB: {'External' if config['use_external'] else 'Local (Docker)'}")
    print(f"  - Database: {config['database_name']}")
    print(f"  - JWT Secret: {'‚úÖ Configured' if config['jwt_secret'] else '‚ùå Missing'}")

    print("\n" + "=" * 60)
    print("  Next Steps")
    print("=" * 60 + "\n")

    if config['use_external']:
        print("1. Start the application:")
        print("   docker-compose up -d")
        print("\n   (MongoDB service will be skipped)")
    else:
        print("1. Start all services (including local MongoDB):")
        print("   docker-compose up -d")

    print("\n2. Access the application:")
    print("   - Frontend: http://localhost:5173")
    print("   - Backend API: http://localhost:5172")
    print("   - API Docs: http://localhost:5172/docs")

    print("\n3. View logs:")
    print("   docker-compose logs -f")

    print("\n" + "=" * 60)
    print("  üéâ Happy diagramming!")
    print("=" * 60 + "\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Installation cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Unexpected error: {str(e)}")
        sys.exit(1)
